/*
 * Mandatory:
 *
 * vars.postgres.image.name
 * vars.postgres.image.version
 * vars.postgres.user
 * vars.postgres.password
 * vars.postgres.database
 * vars.postgres.revision
 * vars.rsync.image.name
 * vars.rsync.image.version
 * vars.rsync.ssh.revision
 * 
 * Optional:
 * 
 * vars.postgres.limits.cpu
 * vars.postgres.limits.memory
 * vars.postgres.requests.cpu
 * vars.postgres.requests.memory
 * vars.postgres.affinity.key
 * vars.postgres.affinity.name
 * vars.postgres.affinity.required
 * vars.postgres.allowOnMaster
 * vars.postgres.tolerations[].effect
 * vars.postgres.tolerations[].key
 * vars.postgres.tolerations[].value
 * vars.rsync.limits.cpu
 * vars.rsync.limits.memory
 * vars.rsync.requests.cpu
 * vars.rsync.requests.memory
 */

import "robobeerun-templates/_affinities.stg"
import "robobeerun-templates/_postgres_probe.stg"
import "robobeerun-templates/_resources.stg"
import "robobeerun-templates/_tolerations.stg"

cc-postgres-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-<vars.postgres.revision>
  namespace: anrisoftware-com
  labels:
    app: postgres
    tier: backend
    group: anrisoftware-com
type: Opaque
data:
  user: <vars.postgres.user;format="base64">
  password: <vars.postgres.password;format="base64">
  database: <vars.postgres.database;format="base64">

---

kind: Service
apiVersion: v1
metadata:
  name: postgres
  namespace: anrisoftware-com
  labels:
    app: postgres
    tier: backend
    group: anrisoftware-com
spec:
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP

---

kind: Service
apiVersion: v1
metadata:
  name: db
  namespace: anrisoftware-com
  labels:
    app: postgres
    tier: backend
    group: anrisoftware-com
spec:
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP

---

apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: postgres
  namespace: anrisoftware-com
  labels:
    app: postgres
    tier: backend
    group: anrisoftware-com
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
        tier: backend
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.postgres.image.name>:<vars.postgres.image.version>
        name: postgres
        ports:
        - containerPort: 5432
          name: "postgres"
        env:
        - name: PGCTLTIMEOUT
          value: "300"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-<vars.postgres.revision>
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-<vars.postgres.revision>
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-<vars.postgres.revision>
              key: database
        <resourcesGroup(parent, vars, vars.postgres)>
        <postgresReadinessProbe(parent, vars)>
        volumeMounts:
        - name: pgdata
          mountPath: "/var/lib/postgresql/data"
          subPath: "pgdata"
      volumes:
      - name: pgdata
        persistentVolumeClaim:
          claimName: anrisoftware-com-data
      <affinitiesGroup(parent, vars, vars.postgres.affinity)>
      <tolerationMasterGroup(parent, vars, vars.postgres.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.postgres.tolerations, vars.postgres.allowOnMaster)>

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: rsync-postgres
  namespace: anrisoftware-com
  labels:
    app: rsync-postgres
    tier: backup
    group: anrisoftware-com
spec:
  replicas: 0
  selector:
    matchLabels:
      app: rsync-postgres
      tier: backup
      group: anrisoftware-com
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: rsync-postgres
        tier: backup
        group: anrisoftware-com
    spec:
      containers:
      - image: <vars.rsync.image.name>:<vars.rsync.image.version>
        name: rsync-postgres
        env:
        - name: RSYNC_AUTHORIZED_KEY
          valueFrom:
            secretKeyRef:
              name: rsync-ssh-<vars.rsync.ssh.revision>
              key: auth-key
        - name: USER
          value: "root"
        - name: RSYNC_STRICT_HOST_KEY_CHECKING_NO
          value: "true"
        ports:
        - containerPort: 2222
          name: ssh
        readinessProbe:
          exec:
            command:
            - /readiness.sh
            - /data/PG_VERSION
          initialDelaySeconds: 5
          timeoutSeconds: 1
        <resourcesGroup(parent, vars, vars.rsync)>
        volumeMounts:
        - mountPath: "/data"
          subPath: "pgdata"
          name: data
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: anrisoftware-com-data
      <affinitiesGroup(parent, vars, vars.postgres.affinity)>
      <tolerationMasterGroup(parent, vars, vars.postgres.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.postgres.tolerations, vars.postgres.allowOnMaster)>

---

>>
