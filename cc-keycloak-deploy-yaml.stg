/*
 * Mandatory:
 *
 * vars.keycloak.image.name
 * vars.keycloak.image.version
 * vars.keycloak.revision
 * vars.keycloak.postgres.user
 * vars.keycloak.postgres.password
 * vars.keycloak.postgres.database
 * vars.keycloak.initialDelaySeconds
 * 
 * vars.postgres.admin.user
 * vars.postgres.admin.password
 * 
 * Optional:
 * 
 * vars.keycloak.limits.cpu
 * vars.keycloak.limits.memory
 * vars.keycloak.requests.cpu
 * vars.keycloak.requests.memory
 * 
 * vars.keycloak.affinity.key
 * vars.keycloak.affinity.name
 * vars.keycloak.affinity.required
 * vars.keycloak.allowOnMaster
 * vars.keycloak.tolerations[].effect
 * vars.keycloak.tolerations[].key
 * vars.keycloak.tolerations[].value
 * 
 * vars.pgbouncer.limits.cpu
 * vars.pgbouncer.limits.memory
 * vars.pgbouncer.requests.cpu
 * vars.pgbouncer.requests.memory
 * vars.pgbouncer.readinessProbe.initialDelaySeconds
 *     Defaults to 3.
 * vars.pgbouncer.livenessProbe.initialDelaySeconds
 *     Defaults to 30.
 */

import "robobeerun-templates/_affinities.stg"
import "robobeerun-templates/_cert_config.stg"
import "robobeerun-templates/_ingress_config.stg"
import "robobeerun-templates/_postgres_probe.stg"
import "robobeerun-templates/_tolerations.stg"
import "robobeerun-templates/_resources.stg"

/*
 *
 */
cc-keycloak-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: Secret
metadata:
  name: db-<vars.keycloak.revision>
  namespace: keycloak-muellerpublic-de
  labels:
    tier: backend
type: Opaque
data:
  user: <vars.keycloak.postgres.user;format="base64">
  password: <vars.keycloak.postgres.password;format="base64">
  database: <vars.keycloak.postgres.database;format="base64">
  admin_user: <vars.postgres.admin.user;format="base64">
  admin_password: <vars.postgres.admin.password;format="base64">

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbouncer-<vars.keycloak.revision>
  namespace: keycloak-muellerpublic-de
  labels:
    tier: backend
data:
  pgbouncer.ini: |
    [databases]
    <vars.keycloak.postgres.database> = host=db port=5432 dbname=<vars.keycloak.postgres.database>
    [pgbouncer]
    listen_port = 5432
    listen_addr = 0.0.0.0
    auth_type = md5
    auth_file = /pgconf/bouncerconfig/users.txt
    logfile = /tmp/pgbouncer.log
    pidfile = /tmp/pgbouncer.pid
    admin_users = <vars.keycloak.postgres.user>
    ignore_startup_parameters = extra_float_digits
  users.txt: |
    "<vars.keycloak.postgres.user>" "<vars.keycloak.postgres.password>"

---

apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: keycloak-muellerpublic-de
  labels:
    tier: frontend
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: 8080
  selector:
    app: keycloak

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: keycloak
  namespace: keycloak-muellerpublic-de
  labels:
    tier: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
      tier: frontend
  template:
    metadata:
      labels:
        app: keycloak
        tier: frontend
    spec:
      containers:
      - image: <vars.keycloak.image.name>:<vars.keycloak.image.version>
        name: keycloak
        env:
        - name: JAVA_OPTS
          value: "-Xms<vars.keycloak.java.heapStart> -Xmx<vars.keycloak.java.heapMax> -XX:MetaspaceSize=<vars.keycloak.java.metaspaceStart> -XX:MaxMetaspaceSize=<vars.keycloak.java.metaspaceMax> -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true"
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        - name: KEYCLOAK_USER
          value: "<vars.keycloak.adminUser>"
        - name: KEYCLOAK_PASSWORD
          value: "<vars.keycloak.adminPassword>"
        - name: DB_VENDOR
          value: "postgres"
        - name: DB_ADDR
          value: "localhost"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-<vars.keycloak.revision>
              key: user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-<vars.keycloak.revision>
              key: password
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: db-<vars.keycloak.revision>
              key: database
        - name: POSTGRES_PORT
          value: ""
        ports:
        - containerPort: 8080
          name: "keycloak"
        <resourcesGroup(parent, vars, vars.keycloak)>
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: <vars.keycloak.initialDelaySeconds>
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: <vars.keycloak.initialDelaySeconds>
          periodSeconds: 60
          timeoutSeconds: 10
      - image: <vars.pgbouncer.image.name>:<vars.pgbouncer.image.version>
        name: pgbouncer
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: db-<vars.keycloak.revision>
              key: user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: db-<vars.keycloak.revision>
              key: password
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: db-<vars.keycloak.revision>
              key: database
        - name: PGHOST
          value: "127.0.0.1"
        <postgresReadinessProbe(parent, vars.pgbouncer)>
        <resourcesGroup(parent, vars, vars.pgbouncer)>
        volumeMounts:
        - mountPath: "/pgconf"
          name: "pgbouncer-config"
      restartPolicy: Always
      volumes:
      - name: "pgbouncer-config"
        configMap:
          name: "pgbouncer-<vars.keycloak.revision>"
      <affinitiesGroup(parent, vars, vars.keycloak.affinity)>
      <tolerationMasterGroup(parent, vars, vars.keycloak.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.keycloak.tolerations, vars.keycloak.allowOnMaster)>

---

apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-db-setup
  namespace: keycloak-muellerpublic-de
  labels:
    app: keycloak
    tier: frontend
    group: keycloak
spec:
  template:
    metadata:
      name: keycloak-db-setup
    spec:
      containers:
      - image: <vars.postgres.image.name>:<vars.postgres.image.version>
        name: keycloak-db-setup
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: keycloak-db-<vars.keycloak.revision>
              key: user
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-<vars.keycloak.revision>
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: keycloak-db-<vars.keycloak.revision>
              key: database
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-<vars.keycloak.revision>
              key: admin_password
        - name: PGHOST
          value: "postgres"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: "postgres"
        command:
        - /bin/sh
        - -i
        - -c
        - >
          while ! PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql "postgresql://postgres@postgres" -c "SELECT 1;"; do sleep 3; done;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createuser $POSTGRESQL_USER ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} createdb --owner=$POSTGRESQL_USER $POSTGRESQL_DATABASE ;
          PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD} psql --command "ALTER USER \"${POSTGRESQL_USER}\" WITH ENCRYPTED PASSWORD '${POSTGRESQL_PASSWORD}';"
      restartPolicy: Never
  backoffLimit: 4

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sso-andrea-muellerpublic-de
  namespace: keycloak-muellerpublic-de
  labels:
    app: keycloak
    tier: frontend
    deployment: keycloak
  annotations:
    <ingressDefaultAnnotations(parent, vars, vars.nginx)>
spec:
  <ingressDefaultSpec(parent, vars, vars.keycloak, "sso-andrea-muellerpublic-de")>

---

<ingressService(parent, vars, vars.keycloak, "keycloak", "keycloak", "sso-andrea-muellerpublic-de")>

---

apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: sso-andrea-muellerpublic-de
  namespace: keycloak-muellerpublic-de
spec:
  <certDefaultSpecProd(parent, vars, vars.keycloak, "sso-andrea-muellerpublic-de")>

---

>>
